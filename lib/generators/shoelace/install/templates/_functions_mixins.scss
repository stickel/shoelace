@import 'variables';
// Functions and mixins

// Simple function to output a width declaration based on number
// of columns set in the parameter
// uses: $grid-column-width, $grid-gutter-width
@function cols($n: 1) {
  // add code here...
}


// Mixins
// Responsive breakpoints taken from The Goldilocks Approach
// http://www.designbyfront.com/demo/goldilocks-approach/
@mixin respond-to($media: default) {
  @if $media == small {
    @media screen and (max-width: 30em) {
      @content;
    }
  } @else if $media == large {
    @media screen and (min-width: 33.236em) {
      @content;
    }
  } @else if $media == default {
    @media screen and (min-width: 30em) and (max-width: 63.236em) {
      @content;
    }
  }
}

// Image Replacement
// Hides text off to the side and shows the specified background image
// Height and width are determined by the image dimensions
@mixin image-replace($image) {
  @if not $image or $image == '' {
    @warn "$image needed for replacement to work"
  } @else {
    background: image-url($image) no-repeat 0 0;
    @extend %image-replacement;
    height: image-height($image);
    width: image-width($image);
  }
}

// With Icon
// Used to place an icon or image to the left or right of
// an element. Padding is determined by the image size.
@mixin with-icon($icon, $side: 'left', $position: '0 0') {
  @if not $icon or $icon == '' {
    @warn "No $icon specified"
  } @else {
    background: image-url($icon) no-repeat unquote($position);
    padding-#{side}: floor(image-width($icon) + 5);
  }
}

// Builds a grid and grid units under the CSS rule it's included in
// $gutter defaults to the width set in _variables.scss
// Responsive breakpoints ala the Goldilocks Approach
// (http://www.designbyfront.com/demo/goldilocks-approach/)
// are included in the grid
@mixin grid($cols: 2, $width: 30em, $gutter: $grid-gutter-width) {
  $finalWidth: ($width/$cols) - $gutter;
  width: $width;
  @extend %clearfix;
  .unit {
    @extend %float-left;
    margin-right: $gutter;
    width: $finalWidth;
  }
  .unit.last {
    margin-right: 0;
  }
  @include respond-to(small) {
    width: 30em;
    .unit {
      float: none;
      margin-right: 0;
      width: 30em;
    }
  }
  @include respond-to(large) {
    width: 60em;
    .unit {
      margin-right: $gutter;
      width: $finalWidth;
    }
  }
}

// Utility mixins

@mixin float($direction: left) {
  float: $direction;
}

@mixin clear($side: both) {
  clear: $side;
}

@mixin clearfix {
  overflow: hidden;
  *zoom: 1;
}

@mixin inline-block {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}

// prefixed, adds vendor prefixes to the specified property
@mixin prefixed($property, $value) {
  @each $prefix in $browser-prefixes {
    #{$prefix}#{$property}: $value;
  }
}

// CSS3

// Rounded corners
@mixin rounded($radius) {
  @include prefixed(border-radius, $radius);
}

// Linear gradient
@mixin linear-gradient($start, $color-stops, $image: false) {
  @if not $start {
    $start: top;
  }
  @each $prefix in $browser-prefixes {
    @if $image == false {
      background-image: #{$prefix}linear-gradient($start, $color-stops);
    } @else {
      background-image: $image #{$prefix}linear-gradient($start, $color-stops);
    }
  }
}

// Box shadow
@mixin box-shadow($shadow...) {
  @include prefixed(box-shadow, $shadow);
}

// Modules

// Buttons
@mixin button($type: default) {
  @extend %m-button;
  @include rounded(0.41em);
  @each $color in $button-color-map {
    @if nth($color, 1) == $type {
      $bg: nth($color, 2);
      $text: nth($color, 3);
      $hover-bg: nth($color, 4);
      @include linear-gradient(top, ($bg 65%, darken($bg, 10%)));
      border: 1px solid darken($bg, 20%);
      color: $text;
      text-shadow: darken($bg, 10%) 1px 1px 0;
      &:hover {
        @include linear-gradient(top, ($hover-bg 65%, darken($hover-bg, 10%)));
        @include box-shadow($hover-bg 0 0 5px);
        /*text-shadow: darken($hover-bg, 30%) 1px 1px 0;*/
      }
    }
  }
}

@mixin flash-message($style: notice) {
  $bg: hsla(200, 50%, 50%, 0.9);
  $color: $color-notice;
  @if $style == 'warn' {
    $bg: hsla(50, 80%, 50%, 0.9);
    $color: $color-warn;
  } @else if $style == 'error' {
    $bg: hsla(5, 70%, 40%, 0.9);
    $color: $color-error;
  }
  background: $bg;
  border: 1px solid darken($color, 15%);
  color: darken($color, 30%);
  @include box-shadow($color 0 0 10px);
}
